{"/":{"title":"Introduction","data":{"":"JVM\nJava 8 ~ 21 Features\nObject"}},"/java-features/java-10":{"title":"Java 10","data":{"java-10#Java 10":"","참고자료#참고자료":"Java 10의 새로운 기능 - 성능향상\nJava 10 - var 키워드로 변수선언 (지역변수 타입추론)\nJava 10 의 새로운 기능\nhttps://www.baeldung.com/java-10-overview","요약#요약":"G1 가비지 컬렉터의 Full GC 수행시 병렬기반 동작하도록 변경\nJava 10 에서는 G1 가비지 컬렉터로 Full GC 수행 시에 병렬 기반 Mark Seep Compact 알고리즘을 사용하도록 변경. 병렬 기반이기에 Full GC 시의 정지시간을 효과적을 줄여주게 되었다.\n참고 : Java 9 에서는 G1 가비지 컬렉를 이용한 Full GC 는 싱글스레드 기반 Mark Sweep Compact 알고리즘을 사용\nAppCDS\nJDK8, JDK9 에서는 상용기능이었으나, Java 10 에서는 오픈 소스이며 공개적으로 사용 가능\nGraal 컴파일러를 JIT 컴파일러로 쓸수 있게끔 제공. Java 10 에서는 Graal 컴파일러는 실험적인 기능이기에 현존하는 JIT 컴파일러보다는 더 나은 성능을 보장하지는 않는다.\nvar 키워드 도입\nvar 키워드를 사용하면 지역변수 추론시 컴파일 타임에 변수의 타입을 추론가능해짐.\n변수의 타입을 지정하지 않고 var 키워드를 사용해 변수를 선언.\n참고 - codechacha\n불변 컬렉션관련 편의성 정적 메서드 제공\ncopyOf() : 주어진 Collection 의 수정 불가능한 복사본 반환\nCollectors.toUnmodifiable() : Stream의 collect 연산시 불변 List,Map,Set으로 수집하는 연산\nOptional 에 orElseThrow 추가\n기존 get() 메서드를 사용하는 것에 비해 비교적 권장되는 편.\n컨테이너 인식 관련 지원\nXX:UseContainerSupport\nJVM이 Docker 컨테이너에서 실행되고 있는지 인식가능해짐\nXX:ActiveProcessorCount={count}\n컨테이너 내에서 구동되는 JVM이 사용할 CPU 수를 지정\nXX:InitialRAMPercentage, XX:MaxRAMPercentage, XX:MinRAMPercentage\nJava 힙의 초기 메모리 퍼센트, 최대 퍼센트, 최소 퍼센트를 지정 가능해짐\n루트인증서\nTLS 등의 중요 Security 관련 구성요소를 OpenJDK 빌드에서 기본적으로 작동하지 않던 이슈가 있었는데\nJava 10 부터는 Oracle 의 Java SE 루트 CA 프로그램에서 루트 인증서를 오픈 소스로 제공\nOpen JDK 빌드를 개발자에게 더 매력적으로 만들고 Oracle JDK 빌드 간의 차이를 줄이기 위한 Oracle 에서의 지원내용\nCLI 변경사항\njavah 도구 제거. 대신 javac -h 사용가능. (javah 는 네이티브 메서드를 구현하는 데에 필요한 c 헤더 및 소스파일을 생성시 사용했던 도구)\npolicytool 제거\n정책 파일 생성 및 관리를 위한 UI 기반 도구\njava -Xprof 옵션 제거\n실행중인 프로그램을 프로파일링, 프로파일링 데이터를 표준 출력(stdout)으로 내보내는데 사용되던 도구\n대신 jmap 도구를 사용하면 된다.\njava.security.acl\njava.security.acl 패키지는 java.security.Policy 및 관련 클래스로 대체 됨\nforRemoval = true 로 표시\njava.security.{Cirtificate, Identity, IdentityScope, Signer} 내의 API 는 모두 forRemoval = true 로 표시\n시간 기반 릴리즈 버전 관리\nJava 10 부터 Oracle 은 Java 의 시간 기반 릴리즈로 변경\n새로운 기능 릴리즈에 대한 지원은 6개월 동안만 지속\n장기 지원 릴리즈는 LTS로 표시되며 LTS에 대한 지원은 3년. Java 11 은 LTS 릴리즈\n6개월마다 새로운 Java 릴리즈. 이를 기능릴리즈라 명명\n2018년 3월 릴리즈 : JDK 10\n2018년 9월 릴리즈 : JDK 11\n기능 리리즈에 대한 지원은 다음 릴리즈까지 6개월 동안만 지속\njava -version  시 GA 날짜가 출력에 포함\nopenjdk version \"10\" 2018-03-20"}},"/java-features/java-16":{"title":"Java 16","data":{"java-16#Java 16":"","참고자료#참고자료":"Java 8 부터 16까지의 신규기능들\nZGC - JDK 16의 새로운 기능들(gc 성능 관련)","요약#요약":"text block\nJEP 359 - Records를 정식지원 시작\n자바 15의 외부메모리 접근 인큐베이팅 2차\n자바 15에 추가된 sealed 클래스의 2차 Preview\nJEP 387 : 자바 8부터 제거된 악명높은 PermGen 대신 Metaspace 방식을 지원하기 시작.\nJEP 343 : jpackage 명령어를 통해 각 운영체제별 자바 프로그램을 설치 패키지(pkg, deb, msi 등)로 생성하는 기능이 정식으로 추가되어, 자바 프로그램을 손쉽게 배포하는 기능이 추가됨\nJEP 389 : JNI를 대신할 외부 링크 방식의 인터페이스를 인큐베이팅을 통해 시작\nJEP 347 : 자바 네이티브(JNI 등) 개발 시 C++14 규격을 지원하기 시작\nJEP 338 : Vector API. 자동병렬프로세싱을 지원하는 자동 벡터 API가 추가될 예정 (Incubator)\nJEP 390 : 값 유형의 클래스를 동기화에 사용 시 경고 메시지가 개선"}},"/java-features/java-11":{"title":"Java 11","data":{"java-11-변경-내용들#Java 11 변경 내용들":"","참고자료#참고자료":"Java 8과 비교하여 Java 11 에서는 GC가 어떻게 변했을까?\nJava 11 New Features","요약#요약":"Java 10 까지는 상업적으로 사용할 수 있는 마지막 무료 Oracle JDK 릴리즈. Java 11 부터는 Oracle의 무료 LTS가 없다. 다만, OpenJDK 를 제공하고 있다.\nJava 9 에서부터 계속해서 디폴트 GC는 G1GC\nZGC (Z Garbage Collector) 실험적 도입\n테라바이트 규모의 매우 큰 heap 을 사용하는 애플리케이션을 위한 GC\n10ms 미만의 짧은 대기 시간이 필요한 경우에 사용\nlambda 에서 var 키워드 사용 지원 추가 (대신 @NonNull 필요)\n아래에 간단한 예제 추가(!!TODO!!)\nHttpClient 추가 (Java 9 에서는 HttpRequest, Java 11 에서는 HttpClient)\nHttp 1.1, 2 를 모두 지원\njavac 컴파일 없이 바로 java Helloworld 실행 가능해짐\n성능\n상수 Pool 지원\n테스트용도 가비지수집기(Epsilon) 제공. 메모리를 할당하지만, 가비지는 수집x, 따라서 메모리 부족 오류 테스트/시뮬레이션 할때 사용가능.\nAArch64 내장함수들 최적화, java.util.Math 의 sin,cos,log 에 대한 새로운 내장함수 구현\nString 클래스에 편의성 메서드 추가\nisBlank, lins, strip, stripLeading, stripTrailing, repeat\n테스트 코드를 추가해둘 예정\nFile 클래스에 편의성 메서드 추가\nwriteString, readString\n리스트 → 배열 변환 편의 메서드 추가 (e.g. wordList.toArray(String[]::new))\nPredicate 인터페이스에 not 메서드 추가 (negate 와 유사한 역할)\nNest Class, 중첩 클래스 액세스 개념 도입\n유니코드 10 지원, 이모지 제공, 더 많은 문자 제공\n암호화 방식관련 불안전한 것들 보완, 새로운 암호화 키 계약 지원, TLS 버전 1.3 업그레이드 관련 변경사항 (참고)\n제거된 기능\nJava EE, CORBRA\nJMC, JavaFX\nJavaFX는 JDK외부에서 벼롣의 모듈세트로 사용가능, JMC는 독립형 버전의 JMC 다운로드 후 사용가능\nNashron Javascript 엔진, Jar 파일에 대한 Pack200 압축해제"}},"/java-features":{"title":"Java Features","data":{"java-features#Java Features":""}},"/java-features/java-17":{"title":"Java 17","data":{"java-17#Java 17":"","참고자료#참고자료":"JDK 17 발표 및 새로운 변화 - blogs.oracle.com\n자바17의 새로운 기능들, 3년 만에 LTS 버전 릴리즈\nJava 17로 전환을 고려해야 하는 이유\n우리팀이 JDK17을 도입한 이유\nJDK17 이제는 AdoptOpenJDK 대신 Eclipse Temurin 사용","개인적인-생각#개인적인 생각":"이 글을 처음 썼을 때는 1년전인 2023년도 3월이었고, 지금은 새로운 버전으로 글을 쓰고 있습니다. 현 시점에서 Java 보다는 Kotlin 을 선호하는 편이지만 Java 는 무시할 수 없는 가장 편한 언어로 생각하고 있습니다. 만약 프로젝트를 새로한다면 Java 17 을 선택하게 될 것 같습니다.Java 17 은 LTS 버전이며 버그픽스도 많이 되어 있는 편이기에 어느 정도의 최신 Java 스펙을 갖추고 있으면서 오랫동안 지원이 되는 Java 버전을 원한다면 Java 17 을 선택하는 것도 나쁘지 않은 선택으로 보입니다. 또한 Java 11 ~ 16 사이에 추가된 문법적인 편의성을 두루 포함하고 있습니다.","요약#요약":"LTS 주기 변경\nJDK 17 부터 LTS 버전에 대한 주기를 2년으로 변경 (JDK 17 이전에는 LTS 주기가 3년)\n2021년 9월 발표된 JDK 17의 다음 LTS 버전은 2년 후인 2023년 9월에 발표될 예정 (이글을 쓰는 현재날짜는 2023년 3월 19일)\n참고) LTS 주기 변경하기 전에는 2024년 9월 발표 예정이었다.\n새로운 라이선스 적용\nJDK 17부터는 NTFC (Oracle No-Fee Terms and Conditions) 라이선스를 적용해서 배포.\nJDK 17 이전에는 OTN (Oracle Technology Network) 라이선스.\nNTFC 라이선스에서는 개발자들이 많이 사용하는 SDKMAN 과 같은 배포,설치 툴을 이용해 Oracle JDK를 받을 수 있다. 다만, 배포의 경우 추가로 비용을 받지 않는 경우에만 허용된다. (참고. oracke jdk 배포를 의미함.)\n참고) JDK 17 기여도\nJDK Bug System 에 등록된 2645 개의 버그 중 1774개 외의 871 개의 문제점들을 다른 기관들의 참여로 이루어졌다고 함\nJEP 406, Preview. Switch~Case 문에 Pattern Matching 사용가능\ncase 문을 람다 기반으로 작성 가능하다. 이때 null 데이터도 조금 더 간편하게 다룰 수 있게 되었다.\n다만 아직 여전히 Preview 단계다.\ne.g.\npublic void printHello(String s){\r\nswitch(s){\r\ncase null -> System.out.println(\"널 이에요\"); \r\ncase \"hello\", \"world\" -> System.out.println(\"안녕하세요\");\r\ndefault -> System.out.println(\"디폴트\");\r\n}\r\n}\ncase 문에 기본타입 외에도 모든 참조 타입을 사용할 수 있게 되었다.\n이전에는 primitive 타입(기본타입), 일치하는 박스 타입(Character, Byte, Short, Integer 등), String, enum 타입만 허용됐었다.\ne.g.\nrecord Point(int i, int j) {}\r\nenum Color { RED, GREEN, BLUE; }\r\n\r\nstatic void typeTester(Object o) {\r\n\tswitch (o) {\r\n\t\tcase null     -> System.out.println(\"null\");\r\n\t\tcase String s -> System.out.println(\"String\");\r\n\t\tcase Color c  -> System.out.println(\"Color with \" + Color.values().length + \" values\");\r\n\t\tcase Point p  -> System.out.println(\"Record class: \" + p.toString());\r\n\t\tcase int[] ia -> System.out.println(\"Array of ints of length\" + ia.length);\r\n\t\tdefault       -> System.out.println(\"Something else\");\r\n\t}\r\n}\ninstanceof 사용 문법 간소화\ne.g.\n기존 : if(o instanceof String){ ... }\n자바17 : if(o instanceof String s) { ... }\n변수 s를 사용하는 코드를 if 문 안에서 사용 가능하다.\nJEP 409 sealed class\n코틀린에서 사용하는 sealed class와 거의 유사한 기능이 지원된다.\nsealed class 는 JDK15 에서 Preview (JEP 360) 로 제안되었고, JDK 16 에서 Second Preview (JEP 397)로 수정제안된 이력이 있다."}},"/java-features/java-21":{"title":"Java 21","data":{"java-21#Java 21":"정리 예정!!"}},"/java-features/java-9":{"title":"Java 9","data":{"java-9#Java 9":"","참고자료#참고자료":"일반적인 GC와 G1GC\nG1GC의 라이프사이클, 장단점, heap 구조","요약#요약":"디폴트 메서드에도 package private 지정 가능\ntry with resource\n과거 방식 : try 내부 불록에 인라인으로 선언되어야 하는 방식\nJava 9 이후의 방식 : try 외부에서 자원을 선언해도 가능\n익명객체 생성 시에 다이아몬드 연산자 지원\n불변 컬렉션 API\ne.g. List.of(\"1\", \"2\", \"3\")\ne.g. Set.of(1,2,3)\ne.g. Map.of(\"1\":1, \"2\",2)\nOptional.stream()\nOptional 객체 역시 Stream 으로 처리할 수 있게 되었다.\nG1GC\nJDK 9 에서부터 G1 가비지 컬렉터가 디폴트 GC. 하지만 Java 9 까지는 Full GC는 싱글 스레드 기반 Mark Sweep Compact 알고리즘.\nRegion 을 일정한 크기로 나누어 객체를 할당한다. G1GC는 Region 을 튜닝하고 이에 따라 stop the world 를 최소화한다.\nJShll 커맨드 라인 툴 도입\n새로운 Http Client 도입 (HttpRequest)\n프로세스 API (ProcessHandle클래스)\nJCMD 커맨드 라인툴\nPublish, Subscriber 프레임워크\n통합 JVM 로깅\nJVM 로깅을 제공하는 공통 기능이 생겼는데, 각 모듈별로 독자적으로 공통기능을 사용해 독자적으로 로깅을 수행할 수 있는 로깅이 Java 9 부터 도입"}},"/jvm":{"title":"Jvm","data":{}},"/object/9-flexible-design":{"title":"9 Flexible Design","data":{}},"/tdd":{"title":"Tdd","data":{"tdd#TDD":"모르겠다. 걍 시간날 때 마다 꾸준히!!!"}},"/lombok-effective-how-to":{"title":"Lombok Effective How To","data":{"롬복-효율적으로-쓰자#롬복, 효율적으로 쓰자":""}},"/java-features/java-8":{"title":"Java 8","data":{"java-8#Java 8":"꽤 오래된 버전이기에 시간이 될때 정리를 시작할 예정입니다.\nCompletableFuture, CompletableStage\nLocalDate, LocalDateTime, OffsetDateTime, ZonedDateTime\nStream API\nlambda, 함수형 인터페이스\nOptional"}},"/object":{"title":"Object","data":{"":"Object 의 주요 내용들을 요약\n참고도서\n오브젝트"}},"/object/3-cowork-responsibility-role":{"title":"3 Cowork Responsibility Role","data":{}}}