(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[930],{8635:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/jvm/compiler-interpreter-jit-compiler",function(){return t(4266)}])},4266:function(e,a,t){"use strict";t.r(a),t.d(a,{__toc:function(){return d}});var o=t(5893),i=t(2673),n=t(373),r=t(8426);t(9128);var c=t(2643);let d=[{depth:2,value:"정적 컴파일러, 인터프리터, JIT 컴파일러",id:"정적-컴파일러-인터프리터-jit-컴파일러"},{depth:3,value:"정적 컴파일러",id:"정적-컴파일러"},{depth:3,value:"인터프리터",id:"인터프리터"},{depth:3,value:"JIT 컴파일러",id:"jit-컴파일러"}];function _createMdxContent(e){let a=Object.assign({h2:"h2",h3:"h3",p:"p",ul:"ul",li:"li",code:"code"},(0,c.a)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"정적-컴파일러-인터프리터-jit-컴파일러",children:"정적 컴파일러, 인터프리터, JIT 컴파일러"}),"\n",(0,o.jsx)(a.h3,{id:"정적-컴파일러",children:"정적 컴파일러"}),"\n",(0,o.jsxs)(a.p,{children:["실행 전에 무조건 컴파일을 해서 기계어로 번역해놓는 방식의 컴파일러입니다. 조금 옛날 버전의 C언어가 여기에 속합니다. 참고로 C++ 등의 언어는 최근 개선을 거듭해서 JIT 컴파일러를 사용하는 것으로 알려져 있습니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(a.h3,{id:"인터프리터",children:"인터프리터"}),"\n",(0,o.jsxs)(a.p,{children:["바이트코드, 소스코드를 최적화 없이 번역만을 수행합니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(a.p,{children:["과거에는 인터프리터를 사용하는 스크립트 언어가 많았는데, 대부분의 언어들이 JIT 컴파일러를 사용하는 방식으로 전환중입니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(a.h3,{id:"jit-컴파일러",children:"JIT 컴파일러"}),"\n",(0,o.jsxs)(a.p,{children:["정적 컴파일러 만큼 빠르면서 인터프리터 언어의 빠른 응답 속도를 가집니다. 내부적으로는 캐시를 이용하기도 합니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(a.p,{children:["JVM 은 JIT 컴파일러를 지원합니다. JIT 컴파일러는 Just In Time 이라는 단어의 약자입니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(a.p,{children:["정적 컴파일러보다 빠르면서 인터프리터 언어의 빠른 응답속도를 가집니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(a.p,{children:"자바 코드를 기계어로 변환해서 JVM 의 실행엔진이 실행되기 까지는 아래와 같은 순서를 통해 그 과정이 이뤄집니다."}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Java 코드 → 바이트코드 → JVM Execution Engine 이 JIT 컴파일러로 기계어를 번역하며 실행"}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(a.p,{children:["조금 자세히 설명해보면, ",(0,o.jsx)(a.code,{children:".java"})," 파일로 존재하는 소스코드를 javac 를 통해 바이트 코드로 변환합니다. 이렇게 변한된 바이트 코드는 JRE ClassLoader 를 통해 JVM에 적재합니다. 이렇게 적재한 바이트 코드는 JVM의 실행엔진(Execution Engine) 에 의해 번역하면서 실행되는데, 이 때 JVM의 실행엔진(Execution Engine) 은 JIT 컴파일러를 사용해 번역을 수행합니다.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(a.p,{children:["JIT 컴파일러는 정적 컴파일러 만큼 빠르면서 인터프리터 언어의 빠른 응답속도를 가진다는 것이 장점입니다. JIT 코드는 일반적인 인터프리터 언어에 비해 훨씬 좋은 성능을 냅니다. 심지어 경우에 따라 정적 컴파일러 언어보다 좋은 성능을 냅니다. 이것은 실행 과정에 컴파일을 할 수 있기 때문에 나타나는 장점입니다.",(0,o.jsx)("br",{})]})]})}let j={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,c.a)(),e.components);return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/jvm/compiler-interpreter-jit-compiler.mdx",route:"/jvm/compiler-interpreter-jit-compiler",timestamp:1713141032e3,pageMap:[{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"java-features",route:"/java-features",children:[{kind:"MdxPage",name:"java-10",route:"/java-features/java-10"},{kind:"MdxPage",name:"java-11",route:"/java-features/java-11"},{kind:"MdxPage",name:"java-16",route:"/java-features/java-16"},{kind:"MdxPage",name:"java-17",route:"/java-features/java-17"},{kind:"MdxPage",name:"java-21",route:"/java-features/java-21"},{kind:"MdxPage",name:"java-8",route:"/java-features/java-8"},{kind:"MdxPage",name:"java-9",route:"/java-features/java-9"},{kind:"Meta",data:{"java-8":"Java 8","java-9":"Java 9","java-10":"Java 10","java-11":"Java 11","java-16":"Java 16","java-17":"Java 17","java-21":"Java 21"}}]},{kind:"MdxPage",name:"java-features",route:"/java-features"},{kind:"Folder",name:"jvm",route:"/jvm",children:[{kind:"MdxPage",name:"compiler-interpreter-jit-compiler",route:"/jvm/compiler-interpreter-jit-compiler"},{kind:"MdxPage",name:"java-code-compile-execution-processes",route:"/jvm/java-code-compile-execution-processes"},{kind:"MdxPage",name:"jvm-modules",route:"/jvm/jvm-modules"},{kind:"MdxPage",name:"minor-gc-major-gc-object-lifecycle",route:"/jvm/minor-gc-major-gc-object-lifecycle"},{kind:"MdxPage",name:"what-is-garbage-collector",route:"/jvm/what-is-garbage-collector"},{kind:"Meta",data:{"java-code-compile-execution-processes":"Java 파일이 컴파일되어 실행되기까지","compiler-interpreter-jit-compiler":"정적 컴파일러, 인터프리터, JIT 컴파일러","jvm-modules":"JVM 의 각 모듈들","what-is-garbage-collector":"가비지 컬렉터란?","minor-gc-major-gc-object-lifecycle":"Minor GC, Major GC, 객체의 생존 흐름"}}]},{kind:"MdxPage",name:"jvm",route:"/jvm"},{kind:"Folder",name:"lombok-effective-how-to",route:"/lombok-effective-how-to",children:[{kind:"MdxPage",name:"builder-object-creation-builder-variation",route:"/lombok-effective-how-to/builder-object-creation-builder-variation"},{kind:"MdxPage",name:"builder-object-creation-static-factory-method",route:"/lombok-effective-how-to/builder-object-creation-static-factory-method"},{kind:"MdxPage",name:"builder-object-creation-validation-check",route:"/lombok-effective-how-to/builder-object-creation-validation-check"},{kind:"MdxPage",name:"stop-using-data-annotation",route:"/lombok-effective-how-to/stop-using-data-annotation"},{kind:"Meta",data:{"stop-using-data-annotation":"@Data 애노테이션은 가급적 사용을 피하자","builder-object-creation-validation-check":"객체 생성시 유효성 체크는 철저히","builder-object-creation-builder-variation":"객체 생성 빌더를 용도별로 구별하자","builder-object-creation-static-factory-method":"빌더를 통해 객체생성은 정적 팩토리 메서드로"}}]},{kind:"MdxPage",name:"lombok-effective-how-to",route:"/lombok-effective-how-to"},{kind:"Folder",name:"object",route:"/object",children:[{kind:"MdxPage",name:"3-cowork-responsibility-role",route:"/object/3-cowork-responsibility-role"},{kind:"MdxPage",name:"9-flexible-design",route:"/object/9-flexible-design"},{kind:"Meta",data:{"3-cowork-responsibility-role":"3. 협력, 책임, 역할","9-flexible-design":"9. 유연한 설계"}}]},{kind:"MdxPage",name:"object",route:"/object"},{kind:"MdxPage",name:"tdd",route:"/tdd"},{kind:"Meta",data:{index:"Introduction",jvm:"JVM","java-features":"Java Features",object:"Object","lombok-effective-how-to":"롬복, 효율적으로 쓰자",tdd:"TDD",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"Compiler Interpreter Jit Compiler",headings:d},pageNextRoute:"/jvm/compiler-interpreter-jit-compiler",nextraLayout:n.ZP,themeConfig:r.Z};a.default=(0,i.j)(j)},8426:function(e,a,t){"use strict";var o=t(5893);t(7294);let i={logo:(0,o.jsx)("span",{children:"Docs Java Basic"}),project:{link:"https://github.com/chagchagchag/docs-java-basic"},docsRepositoryBase:"https://github.com/chagchagchag/docs-java-basic",footer:{text:"Nextra Docs Template"}};a.Z=i},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=8635)}),_N_E=e.O()}]);