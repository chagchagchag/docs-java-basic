(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[28],{9117:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/object/solid",function(){return i(1994)}])},1994:function(e,n,i){"use strict";i.r(n),i.d(n,{__toc:function(){return d}});var a=i(5893),t=i(2673),r=i(373),o=i(8426);i(9128);var s=i(2643);let d=[{depth:2,value:"SOLID",id:"solid"},{depth:2,value:"SRP",id:"srp"},{depth:2,value:"OCP",id:"ocp"},{depth:2,value:"LICOV",id:"licov"},{depth:2,value:"ISP (Interface Segregation Principle)",id:"isp-interface-segregation-principle"},{depth:2,value:"DIP (Dependency Inversion Principle)",id:"dip-dependency-inversion-principle"}];function _createMdxContent(e){let n=Object.assign({h2:"h2",p:"p",strong:"strong",ul:"ul",li:"li",a:"a",blockquote:"blockquote"},(0,s.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"solid",children:"SOLID"}),"\n",(0,a.jsx)(n.p,{children:"SOLID 에 대해 간단하게 요약합니다."}),"\n",(0,a.jsx)(n.h2,{id:"srp",children:"SRP"}),"\n",(0,a.jsxs)(n.p,{children:["로버트 마틴은  ",(0,a.jsx)(n.strong,{children:'"책임"'}),' 을 이야기하는데, 로버트 마틴은 이 "책임"이라는 개념을 ',(0,a.jsx)(n.strong,{children:'"변경하려는 이유"'})," 로 정의했습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["그리고 ",(0,a.jsx)(n.strong,{children:"클래스나 모듈이 변경하려는 이유는 하나의 이유(=즉, 책임)로 변경되어야 한다"}),"고 했습니다."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%B1%85%EC%9E%84_%EC%9B%90%EC%B9%99",children:"https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%B1%85%EC%9E%84_%EC%9B%90%EC%B9%99"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["보고서 편집과 조회 기능을 하나의 메서드에서 모두 정의하고 있는 경우를 예로 들어보겠습니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["만약 편집 기능을 수정하기 위해 맞춤법 교정 기능을 추가한다면 같이 묶여있는 조회 기능 역시 사이드 이펙트가 있는지 검사해야 합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["또는 조회 기능을 수정하기 위해 페이지네이션을 수정한다면 같이 묶여있는 편집 기능 역시 사이드 이펙트가 있는지 검사하게 됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["이 경우 어떤 기능 또는 모듈이 변경의 이유가 하나여야 하는데, 변경의 이유가 여러 이유가 되었습니다.",(0,a.jsx)("br",{}),"\r\n이 경우 보고서 편집 기능과 조회기능을 따로 분리하는 것이 합리적인 선택이 됩니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["이렇게 한 가지를 변경했을 때 그 한 가지만 영향이 가도록 하는 것이 SRP 입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"ocp",children:"OCP"}),"\n",(0,a.jsxs)(n.p,{children:["확장에는 닫혀있고, 변경에는 열려있어야 한다는 원칙을 의미합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99",children:"https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99"})}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"확장에 대해 열려있다."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"요구사항 변경이 발생했을 때 새로운 동작을 추가해서 모듈을 확장가능한 것을 의미합니다."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"변경에 닫혀 있다."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"또는 모듈의 소스 코드나 바이너리 코드를 변경하지 않고도 기능을 확장할 수 있어야 하는 것을 의미."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.p,{children:["비밀번호 암호화 객체를 구체 타입의 멤버필드로 선언해두었다면, 비밀번호 암호화 종류를 바꿀 때마다 객체의 종류를 변경해야 하므로 변경의 여지가 계속 남아있게 됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.p,{children:"하지만 비밀번호 암호화 객체를 추상화 타입의 멤버필드로 선언해둔다면"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["(변경에는 닫혀있다.)","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"비밀번호 암호화 종류 변경 시에 구체타입에 의존하지 않아도 되기에 변경에는 닫혀있게 됩니다."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["(확장에는 열려있다.)","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"이렇게 추상화 타입에 의존하도록 변경하면 구체타입 내에서의 기능 추가,수정과 같은 확장 작업에는 열려있게 됩니다."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"이렇게 변경이 발생할 수 있는 부분을 Closed 되어 있게 하고, 확장이 일어날 수 있는 부분은 Open 되게끔 하는 것을 OCP 라고 합니다."}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"licov",children:"LICOV"}),"\n",(0,a.jsxs)(n.p,{children:["생략합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"isp-interface-segregation-principle",children:"ISP (Interface Segregation Principle)"}),"\n",(0,a.jsx)(n.p,{children:"Interface Segregation Principle"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Interface_segregation_principle",children:"https://en.wikipedia.org/wiki/Interface_segregation_principle"})}),"\n",(0,a.jsx)(n.li,{children:"no code should be forced to depend on methods it does not use."}),"\n",(0,a.jsx)(n.li,{children:'"어떠한 코드도 사용하지 않는 메서드에 의존하게끔 되어 강제되면 안된다" 는 원칙'}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"ISP splits interfaces that are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Such shrunken interfaces are also called role interfaces.[2] ISP is intended to keep a system decoupled and thus easier to refactor, change, and redeploy."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"예를 들어 커스텀하게 인증클래스를 만들었는데, 여기에는 로그인 시 패스워드가 맞는지 체크하는 패스워드 체크 함수, 암호 인코딩 함수가 있습니다."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"패스워드 체크 함수"}),"\n",(0,a.jsx)(n.li,{children:"암호 인코딩 함수"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["이 두가지 기능은 그대로 두어도 되지만, ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["패스워드 체크 기능을 PasswordChecker 라는 인터페이스를 implements 하도록 해서 interface 로 외부로 노출시키고 ",(0,a.jsx)("br",{})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"암호 인코딩 기능을 PasswordEncoder 라는 인터페이스를 implements 하도록 해서 interface 로 외부로 노출시키면"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.p,{children:"이 인증클래스를 외부에서 사용할 때"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"암호 인코딩 기능만 사용하려 하면 PasswordEncoder interface 타입으로만 접근하면 되고"}),"\n",(0,a.jsx)(n.li,{children:"패스워드 체크 기능을 사용하려 하면 PasswordChecker interface 타입으로만 접근하면 됩니다."}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(n.p,{children:["이렇게 필요한 부분만 접근하려 할때 필요한 기능이 추상화된 interface 를 통해서 접근하는 원칙을 ISP 라고 합니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"dip-dependency-inversion-principle",children:"DIP (Dependency Inversion Principle)"}),"\n",(0,a.jsxs)(n.p,{children:["의존성 역전 원칙입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["구체타입에 의존하는 방식을 역전해서 추상화에 의존하게끔 전환하는 원칙을 의미합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["이렇게 하면 어떤 기능이 의존하고 있는 다른 기능의 구체적인 기능에 의존하지 않고 추상화에만 의존하면 되기에 구체적인 면이 달라지더라도 기존 코드는 유지되므로 유지보수가 편리해집니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["조금 어려운 용어로는 비즈니스에 관련된 부분이 세부사항에 의존하지 않아야 한다는 원칙입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["구체적인 내용에 의존하는 내용이 있다면 추상화에 의존하도록 기존의 방식을 역전시키는 것을 의미합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["구체타입에 의존한 함수 호출보다는 인터페이스와 같은 추상화타입 기반의 함수 호출을 하는 방식을 통해서 하나의 기능이 구체기능에 의존하지 않게끔 할 수 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["객체를 직접 생성해서 사용하는 부분들이 의존성 주입을 통해 외부에서 의존성을 결정하는 것도 의존성 역전 원칙이 지켜진 부분 중의 하나 입니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)("br",{})]})}let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.a)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/object/solid.mdx",route:"/object/solid",timestamp:171638882e4,pageMap:[{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"intellij-hotkey",route:"/intellij-hotkey",children:[{kind:"MdxPage",name:"1-IDE-menu",route:"/intellij-hotkey/1-IDE-menu"},{kind:"MdxPage",name:"2-editor-menu",route:"/intellij-hotkey/2-editor-menu"},{kind:"Meta",data:{"1-IDE-menu":"1. IDE 메뉴","2-editor-menu":"2. 에디터 메뉴"}}]},{kind:"MdxPage",name:"intellij-hotkey",route:"/intellij-hotkey"},{kind:"Folder",name:"java-features",route:"/java-features",children:[{kind:"MdxPage",name:"java-10",route:"/java-features/java-10"},{kind:"MdxPage",name:"java-11",route:"/java-features/java-11"},{kind:"MdxPage",name:"java-16",route:"/java-features/java-16"},{kind:"MdxPage",name:"java-17",route:"/java-features/java-17"},{kind:"MdxPage",name:"java-21",route:"/java-features/java-21"},{kind:"MdxPage",name:"java-8",route:"/java-features/java-8"},{kind:"MdxPage",name:"java-9",route:"/java-features/java-9"},{kind:"Meta",data:{"java-8":"Java 8","java-9":"Java 9","java-10":"Java 10","java-11":"Java 11","java-16":"Java 16","java-17":"Java 17","java-21":"Java 21"}}]},{kind:"MdxPage",name:"java-features",route:"/java-features"},{kind:"Folder",name:"jvm",route:"/jvm",children:[{kind:"MdxPage",name:"compiler-interpreter-jit-compiler",route:"/jvm/compiler-interpreter-jit-compiler"},{kind:"MdxPage",name:"java-code-compile-execution-processes",route:"/jvm/java-code-compile-execution-processes"},{kind:"MdxPage",name:"jvm-modules",route:"/jvm/jvm-modules"},{kind:"MdxPage",name:"minor-gc-major-gc-object-lifecycle",route:"/jvm/minor-gc-major-gc-object-lifecycle"},{kind:"MdxPage",name:"what-is-garbage-collector",route:"/jvm/what-is-garbage-collector"},{kind:"Meta",data:{"java-code-compile-execution-processes":"Java 파일이 컴파일되어 실행되기까지","compiler-interpreter-jit-compiler":"정적 컴파일러, 인터프리터, JIT 컴파일러","jvm-modules":"JVM 의 각 모듈들","what-is-garbage-collector":"가비지 컬렉터란?","minor-gc-major-gc-object-lifecycle":"Minor GC, Major GC, 객체의 생존 흐름"}}]},{kind:"MdxPage",name:"jvm",route:"/jvm"},{kind:"Folder",name:"lombok-effective-how-to",route:"/lombok-effective-how-to",children:[{kind:"MdxPage",name:"builder-object-creation-builder-variation",route:"/lombok-effective-how-to/builder-object-creation-builder-variation"},{kind:"MdxPage",name:"builder-object-creation-static-factory-method",route:"/lombok-effective-how-to/builder-object-creation-static-factory-method"},{kind:"MdxPage",name:"builder-object-creation-validation-check",route:"/lombok-effective-how-to/builder-object-creation-validation-check"},{kind:"MdxPage",name:"stop-using-data-annotation",route:"/lombok-effective-how-to/stop-using-data-annotation"},{kind:"Meta",data:{"stop-using-data-annotation":"@Data 애노테이션은 가급적 사용을 피하자","builder-object-creation-validation-check":"객체 생성시 유효성 체크는 철저히","builder-object-creation-builder-variation":"객체 생성 빌더를 용도별로 구별하자","builder-object-creation-static-factory-method":"빌더를 통해 객체생성은 정적 팩토리 메서드로"}}]},{kind:"MdxPage",name:"lombok-effective-how-to",route:"/lombok-effective-how-to"},{kind:"Folder",name:"object",route:"/object",children:[{kind:"MdxPage",name:"3-cowork-responsibility-role",route:"/object/3-cowork-responsibility-role"},{kind:"MdxPage",name:"9-flexible-design",route:"/object/9-flexible-design"},{kind:"MdxPage",name:"solid",route:"/object/solid"},{kind:"Meta",data:{"3-cowork-responsibility-role":"3. 협력, 책임, 역할","9-flexible-design":"9. 유연한 설계",solid:"solid"}}]},{kind:"MdxPage",name:"object",route:"/object"},{kind:"Folder",name:"tdd",route:"/tdd",children:[{kind:"MdxPage",name:"stub-spy-mock-vs-dummy-fake",route:"/tdd/stub-spy-mock-vs-dummy-fake"},{kind:"Meta",data:{"stub-spy-mock-vs-dummy-fake":"Stub Spy Mock Vs Dummy Fake"}}]},{kind:"MdxPage",name:"tdd",route:"/tdd"},{kind:"Meta",data:{index:"Introduction",jvm:"JVM","java-features":"Java Features",object:"Object","lombok-effective-how-to":"롬복, 효율적으로 쓰자",tdd:"TDD","intellij-hotkey":"Intellij 단축키",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"Solid",headings:d},pageNextRoute:"/object/solid",nextraLayout:r.ZP,themeConfig:o.Z};n.default=(0,t.j)(c)},8426:function(e,n,i){"use strict";var a=i(5893);i(7294);let t={logo:(0,a.jsx)("span",{children:"Docs Java Basic"}),project:{link:"https://github.com/chagchagchag/docs-java-basic"},docsRepositoryBase:"https://github.com/chagchagchag/docs-java-basic",footer:{text:"Nextra Docs Template"}};n.Z=t},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=9117)}),_N_E=e.O()}]);